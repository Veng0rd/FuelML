# -*- coding: utf-8 -*-
"""gazoline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I82bEQEF91xpOim_BoVF6gRLOg1V_uXl
"""

import numpy as np
import pandas as pd

import seaborn as sns
import plotly.graph_objects as go

import xgboost as xgb
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/input/all_fuels_data.csv')
df.head()

fuel_data = df[df['commodity'] == 'Natural Gas'].reset_index()
fuel_data['date'] = pd.to_datetime(fuel_data['date'], errors='coerce')
fuel_data['year'] = fuel_data['date'].dt.year
fuel_data['month'] = fuel_data['date'].dt.month
fuel_data['day'] = fuel_data['date'].dt.day
fuel_data = fuel_data.drop(columns=['date', 'ticker', 'commodity', 'index', 'open', 'high', 'volume', 'low'])

fuel_data.head()

train, test = train_test_split(fuel_data, test_size=0.2, shuffle=False)

X = fuel_data.drop(['close'], axis=1)  # замените 'целевая_переменная' на имя столбца с ценой бензина
y = fuel_data['close']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Вывод размеров обучающего и тестового наборов
print("Размеры обучающего и тестового наборов:")
print("Обучающий набор:", X_train.shape, y_train.shape)
print("Тестовый набор:", X_test.shape, y_test.shape)

reg = xgb.XGBRegressor(n_estimators=10000, learning_rate=0.01,
                       early_stopping_rounds=200)
reg.fit(X_train, y_train,
        eval_set=[(X_train, y_train), (X_test, y_test)],
        verbose=100)

y_pred = reg.predict(X_test)

# Оценка качества модели
mse = mean_squared_error(y_test, y_pred)
print("Среднеквадратичная ошибка на тестовом наборе:", mse)

X_test_sorted = X_test.sort_index()

# Получаем фактические и предсказанные значения
actual_prices = y_test.sort_index().values
predicted_prices = reg.predict(X_test_sorted)

# Создаем график с помощью Plotly
fig = go.Figure()

# Добавляем фактические цены
fig.add_trace(go.Scatter(x=X_test_sorted.index, y=actual_prices, mode='lines', name='Фактическая цена'))

# Добавляем предсказанные цены
fig.add_trace(go.Scatter(x=X_test_sorted.index, y=predicted_prices, mode='lines', name='Предсказанная цена'))

# Настройка макета графика
fig.update_layout(
    title='Фактическая и предсказанная цена бензина',
    xaxis_title='Индекс',
    yaxis_title='Цена',
    showlegend=True
)

# Отображаем график
fig.show()

# Создаем DataFrame для даты предсказания

pred_date = {
    'year': 2024,
    'month': 5,
    'day': 27
}
next_month_features = pd.DataFrame([pred_date])

# Делаем предсказание
next_month_price = reg.predict(next_month_features)[0]
print("Предсказанная цена:", next_month_price)

import joblib

# Сохраняем модель в файл
joblib.dump(reg, '/content/nature_gaz_xgboost_model.pkl')
